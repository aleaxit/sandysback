0th (minus-1th?-) version of "Sandy's Back" -- just a barebone set of VERY
minimal functionality and tests.

To run this code on your own machine (just like any other Google App Engine
app!), you need to download and install the Google App Engine SDK for your
system, and the appropriate Python 2.5 release (already part of Mac OS X 10.5
and many Linux distributions, see http://www.python.org for other systems:
remember you need Python 2.5, *NOT* 2.6!!!).  Or you can run the online version
at http://sandysback.appspot.com (but that doesn't let you change the source
code nor run the unit tests included with this source package;-).

To run the tests included with this package, you ALSO need to download and
install webtest (one sufficient version's included here, there may be better
ones on the web), gaeunit if you like to run tests in your browser (one
sufficient version's included here, there may be better ones on the web), nose
and NoseGAE (not included here) if you like to run tests from a command line
(aka Terminal for MaOSX'ers).

To make either gaeunit OR NoseGAE run at all (on the current versions of
GAE and MacOSX, 1.1.7 and 10.5.5 respectively), I ran into the bug I
reported at
http://code.google.com/p/googleappengine/issues/detail?id=894

The workaround, as I report in that tracker issue, is:
- edit /usr/local/google_appengine/google/appengine/tools/dev_appserver.py 
- at line 891 is list _WHITE_LIST_C_MODULES in class HardenedModulesHook
- you need to add to the list one entry that says:
  'fcntl',
Restart the GAE SDK and you're all set.

The full-text search functionality here (VERY rudimental!) is essentially that
supplied by Google App Engine, in their search.py module; however I copied that
module to this directory, to edit it, in order to reduce the set of stopwords
(actually make it empty, for now!), since in the App Engine's own version there
are WAY too many stopwords.  I tried doing this customization by subclassing and
overriding but the gae's search.py module is just not well designed for that,
whence the copy/paste/edit approach to reuse;-).  We'll want far more
sophisticated search abilities eventually (maybe pylucene?-) so as a temporary
stopgap this may be sufficient for a short while.

The functionality supplied and tested by this code is a TINY subset of Sandy's
full functionality as recalled in file sandysyntax.txt (part of this package).
As of this first version (Nov 30, 2008) we only recognize and act on TWO "verbs"
(leading words in the sentence received by the system):

R or Remember or Remind <words>: we store the sequence of <words> as "a fact"
L or Lookup <words>: we fetch all stored "facts" containing all the words in
  the sequence (in a case-insensitive sense, and ignoring punctuation; but
  we do no stemming, no fuzzy matching, nothing fancy at all for now) and
  show them one per line

That's all for now.  But with the testing infrastructure in place I hope we
can start making a little bit more progress now.

